- hosts: 
    - all
  become: yes
  vars:
    apt_keys:
      - https://download.docker.com/linux/ubuntu/gpg
      - https://packages.cloud.google.com/apt/doc/apt-key.gpg
    apt_repos:
      - deb https://apt.kubernetes.io/ kubernetes-xenial main
      - deb https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    install_packages:
      - apt-transport-https
      - bash-completion
      - ca-certificates
      - containerd.io
      - libnfs-utils
      - lrzsz
      - lsb-release
      - python3
      - python3-pip
      - tcpdump
      - telnet
    kubernetes_packages:
      - kubeadm={{ kubernetes_version }}
      - kubectl={{ kubernetes_version }}
      - kubelet={{ kubernetes_version }}
    install_pip:
      - openshift
      - pip
  tasks:
    - name: Check if we're inside vagrant
      stat:
        path: /home/vagrant
      register: vagrant_stat

    - name: Install APT keys
      apt_key:
        url: "{{ item }}"
        state: present
      loop: "{{ apt_keys }}"

    - name: Add APT repos
      apt_repository:
        repo: "{{ item }}"
        state: present
      loop: "{{ apt_repos }}"

    # Loop for user feedback
    - name: Install packages
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ install_packages }}"

    # Don't loop this one as it will drag in latest versions of deps
    - name: Install kubernetes packages
      package:
        name: "{{ kubernetes_packages }}"
        state: present

    - name: Install pip packages
      pip:
        name: "{{ install_pip }}"
        state: present
        extra_args: --upgrade

    - name: Fix kubectl environment
      copy:
        dest: /etc/profile.d/kubectl.sh
        content: export KUBECONFIG=/etc/kubernetes/admin.conf

    - name: Fix kubectl sudo environment
      copy:
        dest: /etc/sudoers.d/kubeconfig
        content: "Defaults env_keep += \"KUBECONFIG\"\n"

    - name: Disable swap now
      shell:
        cmd: swapoff -a
      changed_when: false

    - name: Disable swap on boot
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+\S+\s+.*)$'
        replace: '#\1'
        backup: yes

    - name: Load containerd modules now
      modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - overlay
        - br_netfilter

    - name: Load containerd modules on boot
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br-netfilter

    - name: Fix crictl environment
      copy:
        dest: /etc/profile.d/crictl.sh
        content: export CONTAINER_RUNTIME_ENDPOINT=unix:///run/containerd/containerd.sock

    - name: Fix crictl sudo environment
      copy:
        dest: /etc/sudoers.d/crictl
        content: "Defaults env_keep += \"CONTAINER_RUNTIME_ENDPOINT\"\n"

    - name: Shim containerd config for systemd cgroup
      shell:
        cmd: containerd config default | awk  '{if ($1~"containerd.runtimes.runc.options") {print ; print "            SystemdCgroup = true"}else {print}}'
      register: containerd_config

    - name: Apply containerd config
      copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout }}"
      notify: Restart containerd

    - name: Configure kubernetes sysctl requirements
      copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
      notify: Reload sysctl

    - name: Ensure correct IP is being advertised by kubelet
      copy:
        dest: /etc/default/kubelet
        content: "KUBELET_EXTRA_ARGS=\"--node-ip={{ ansible_eth1.ipv4.address }}\"\n"
        owner: root
        group: root
        mode: "0644"
      when: vagrant_stat.stat.exists
      notify: Restart kubelet

  handlers:
    - name: Reload sysctl
      shell:
        cmd: "sysctl --system" 

    - name: Restart containerd
      service:
        name: containerd
        enabled: true
        state: restarted

    - name: Restart kubelet
      service:
        name: kubelet
        enabled: yes
        state: restarted
