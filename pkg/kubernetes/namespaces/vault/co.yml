global:
  enabled: true
  logLevel: "info"
  logJSON: false
  name: null
  domain: consul
  adminPartitions:
    enabled: false
    name: "default"
    service:
      type: LoadBalancer
      nodePort:
        rpc: null
        serf: null
        https: null
      annotations: null
  image: "hashicorp/consul:1.11.1"
  imagePullSecrets: []
  imageK8S: "hashicorp/consul-k8s-control-plane:0.39.0"
  datacenter: dc1
  enablePodSecurityPolicies: false
  secretsBackend:
    vault:
      enabled: false
      consulServerRole: ""
      consulClientRole: ""
      consulCARole: ""
      ca:
        secretName: ""
        secretKey: ""
      connectCA:
        address: ""
        rootPKIPath: ""
        intermediatePKIPath: ""
        additionalConfig: |
          {}
  gossipEncryption:
    autoGenerate: false
    secretName: ""
    secretKey: ""
  recursors: []
  tls:
    enabled: false
    enableAutoEncrypt: false
    serverAdditionalDNSSANs: []
    serverAdditionalIPSANs: []
    verify: true
    httpsOnly: true
    caCert:
      secretName: null
      secretKey: null
    caKey:
      secretName: null
      secretKey: null
  enableConsulNamespaces: false
  acls:
    manageSystemACLs: false
    bootstrapToken:
      secretName: null
      secretKey: null
    createReplicationToken: false
    replicationToken:
      secretName: null
      secretKey: null
  enterpriseLicense:
    secretName: null
    secretKey: null
    enableLicenseAutoload: true
  federation:
    enabled: false
    createFederationSecret: false
  metrics:
    enabled: false
    enableAgentMetrics: false
    agentMetricsRetentionTime: 1m
    enableGatewayMetrics: true
  consulSidecarContainer:
    resources:
      requests:
        memory: "25Mi"
        cpu: "20m"
      limits:
        memory: "50Mi"
        cpu: "20m"
  imageEnvoy: "envoyproxy/envoy-alpine:v1.20.0"
  openshift:
    enabled: false
server:
  enabled: "-"
  image: null
  replicas: 3
  bootstrapExpect: null
  serverCert:
    secretName: null
  exposeGossipAndRPCPorts: false
  ports:
    serflan:
      port: 8301
  storage: 10Gi
  storageClass: null
  connect: true
  serviceAccount:
    annotations: null
  resources:
    requests:
      memory: "100Mi"
      cpu: "100m"
    limits:
      memory: "100Mi"
      cpu: "100m"
  securityContext:
    runAsNonRoot: true
    runAsGroup: 1000
    runAsUser: 100
    fsGroup: 1000
  containerSecurityContext:
    server: null
  updatePartition: 0
  disruptionBudget:
    enabled: true
    maxUnavailable: null
  extraConfig: |
    {}
  extraVolumes: []
  extraContainers: []
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app: {{ template "consul.name" . }}
              release: "{{ .Release.Name }}"
              component: server
          topologyKey: kubernetes.io/hostname
  tolerations: ""
  topologySpreadConstraints: ""
  nodeSelector: null
  priorityClassName: ""
  extraLabels: null
  annotations: null
  service:
    annotations: null
  extraEnvironmentVars: {}
externalServers:
  enabled: false
  hosts: []
  httpsPort: 8501
  tlsServerName: null
  useSystemRoots: false
  k8sAuthMethodHost: null
client:
  enabled: "-"
  image: null
  join: null
  dataDirectoryHostPath: null
  grpc: true
  nodeMeta:
    pod-name: ${HOSTNAME}
    host-ip: ${HOST_IP}
  exposeGossipPorts: false
  serviceAccount:
    annotations: null
  resources:
    requests:
      memory: "100Mi"
      cpu: "100m"
    limits:
      memory: "100Mi"
      cpu: "100m"
  securityContext:
    runAsNonRoot: true
    runAsGroup: 1000
    runAsUser: 100
    fsGroup: 1000
  containerSecurityContext:
    client: null
    aclInit: null
    tlsInit: null
  extraConfig: |
    {}
  extraVolumes: []
  extraContainers: []
  tolerations: ""
  nodeSelector: null
  affinity: null
  priorityClassName: ""
  annotations: null
  extraLabels: null
  extraEnvironmentVars: {}
  dnsPolicy: null
  hostNetwork: false
  updateStrategy: null
  snapshotAgent:
    enabled: false
    replicas: 2
    configSecret:
      secretName: null
      secretKey: null
    serviceAccount:
      annotations: null
    resources:
      requests:
        memory: "50Mi"
        cpu: "50m"
      limits:
        memory: "50Mi"
        cpu: "50m"
    caCert: null
dns:
  enabled: "-"
  enableRedirection: false
  type: ClusterIP
  clusterIP: null
  annotations: null
  additionalSpec: null
ui:
  enabled: "-"
  service:
    enabled: true
    type: null
    port:
      http: 80
      https: 443
    nodePort:
      http: null
      https: null
    annotations: null
    additionalSpec: null
  ingress:
    enabled: false
    ingressClassName: ""
    pathType: Prefix
    hosts: []
    tls: []
    annotations: null
  metrics:
    enabled: "-"
    provider: "prometheus"
    baseURL: http://prometheus-server
syncCatalog:
  enabled: false
  image: null
  default: true
  priorityClassName: ""
  toConsul: true
  toK8S: true
  k8sPrefix: null
  k8sAllowNamespaces: ["*"]
  k8sDenyNamespaces: ["kube-system", "kube-public"]
  k8sSourceNamespace: null
  consulNamespaces:
    consulDestinationNamespace: "default"
    mirroringK8S: false
    mirroringK8SPrefix: ""
  addK8SNamespaceSuffix: true
  consulPrefix: null
  k8sTag: null
  consulNodeName: "k8s-sync"
  syncClusterIPServices: true
  nodePortSyncType: ExternalFirst
  aclSyncToken:
    secretName: null
    secretKey: null
  nodeSelector: null
  affinity: null
  tolerations: null
  serviceAccount:
    annotations: null
  resources:
    requests:
      memory: "50Mi"
      cpu: "50m"
    limits:
      memory: "50Mi"
      cpu: "50m"
  logLevel: ""
  consulWriteInterval: null
  extraLabels: null
connectInject:
  enabled: false
  replicas: 2
  image: null
  default: false
  transparentProxy:
    defaultEnabled: true
    defaultOverwriteProbes: true
  metrics:
    defaultEnabled: "-"
    defaultEnableMerging: false
    defaultMergedMetricsPort: 20100
    defaultPrometheusScrapePort: 20200
    defaultPrometheusScrapePath: "/metrics"
  envoyExtraArgs: null
  priorityClassName: ""
  imageConsul: null
  logLevel: ""
  serviceAccount:
    annotations: null
  resources:
    requests:
      memory: "50Mi"
      cpu: "50m"
    limits:
      memory: "50Mi"
      cpu: "50m"
  failurePolicy: "Fail"
  namespaceSelector: |
    matchExpressions:
      - key: "kubernetes.io/metadata.name"
        operator: "NotIn"
        values: ["kube-system","local-path-storage"]
  k8sAllowNamespaces: ["*"]
  k8sDenyNamespaces: []
  consulNamespaces:
    consulDestinationNamespace: "default"
    mirroringK8S: false
    mirroringK8SPrefix: ""
  nodeSelector: null
  affinity: null
  tolerations: null
  aclBindingRuleSelector: "serviceaccount.name!=default"
  overrideAuthMethodName: ""
  aclInjectToken:
    secretName: null
    secretKey: null
  sidecarProxy:
    resources:
      requests:
        memory: null
        cpu: null
      limits:
        memory: null
        cpu: null
  initContainer:
    resources:
      requests:
        memory: "25Mi"
        cpu: "50m"
      limits:
        memory: "150Mi"
        cpu: "50m"
controller:
  enabled: false
  replicas: 1
  logLevel: ""
  serviceAccount:
    annotations: null
  resources:
    limits:
      cpu: 100m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 50Mi
  nodeSelector: null
  tolerations: null
  affinity: null
  priorityClassName: ""
  aclToken:
    secretName: null
    secretKey: null
meshGateway:
  enabled: false
  replicas: 2
  wanAddress:
    source: "Service"
    port: 443
    static: ""
  service:
    enabled: true
    type: LoadBalancer
    port: 443
    nodePort: null
    annotations: null
    additionalSpec: null
  hostNetwork: false
  dnsPolicy: null
  consulServiceName: "mesh-gateway"
  containerPort: 8443
  hostPort: null
  serviceAccount:
    annotations: null
  resources:
    requests:
      memory: "100Mi"
      cpu: "100m"
    limits:
      memory: "100Mi"
      cpu: "100m"
  initCopyConsulContainer:
    resources:
      requests:
        memory: "25Mi"
        cpu: "50m"
      limits:
        memory: "150Mi"
        cpu: "50m"
  initServiceInitContainer:
    resources:
      requests:
        memory: "50Mi"
        cpu: "50m"
      limits:
        memory: "50Mi"
        cpu: "50m"
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app: {{ template "consul.name" . }}
              release: "{{ .Release.Name }}"
              component: mesh-gateway
          topologyKey: kubernetes.io/hostname
  tolerations: null
  nodeSelector: null
  priorityClassName: ""
  annotations: null
ingressGateways:
  enabled: false
  defaults:
    replicas: 2
    service:
      type: ClusterIP
      ports:
        - port: 8080
          nodePort: null
        - port: 8443
          nodePort: null
      annotations: null
      additionalSpec: null
    serviceAccount:
      annotations: null
    resources:
      requests:
        memory: "100Mi"
        cpu: "100m"
      limits:
        memory: "100Mi"
        cpu: "100m"
    initCopyConsulContainer:
      resources:
        requests:
          memory: "25Mi"
          cpu: "50m"
        limits:
          memory: "150Mi"
          cpu: "50m"
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: {{ template "consul.name" . }}
                release: "{{ .Release.Name }}"
                component: ingress-gateway
            topologyKey: kubernetes.io/hostname
    tolerations: null
    nodeSelector: null
    priorityClassName: ""
    annotations: null
    consulNamespace: "default"
  gateways:
    - name: ingress-gateway
terminatingGateways:
  enabled: false
  defaults:
    replicas: 2
    extraVolumes: []
    resources:
      requests:
        memory: "100Mi"
        cpu: "100m"
      limits:
        memory: "100Mi"
        cpu: "100m"
    initCopyConsulContainer:
      resources:
        requests:
          memory: "25Mi"
          cpu: "50m"
        limits:
          memory: "150Mi"
          cpu: "50m"
    affinity: |
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: {{ template "consul.name" . }}
                release: "{{ .Release.Name }}"
                component: terminating-gateway
            topologyKey: kubernetes.io/hostname
    tolerations: null
    nodeSelector: null
    priorityClassName: ""
    annotations: null
    serviceAccount:
      annotations: null
    consulNamespace: "default"
  gateways:
    - name: terminating-gateway
webhookCertManager:
  tolerations: null
prometheus:
  enabled: false
tests:
  enabled: true
